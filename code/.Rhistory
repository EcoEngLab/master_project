install.packages('IRkernel')
IRkernel::installspec(user = FALSE)   # 将 R kernel 安装到 Jupyter 的全局内核
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "/home/jiayi-chen/Documents/MiCRM/micrm/bin", sep = ":"))
IRkernel::installspec(user = FALSE)
setwd("/home/jiayi-chen/Documents/MiCRM/code")
library(ggplot2)
library(readr)
library(tidyr)
library(dplyr)
df_abundance <- read.csv("../data/df_results.csv")
long_data <- pivot_longer(
df_abundance,
cols = starts_with("RelAbun_Comm"),
names_to = c("Community", "Species"),
names_pattern = "RelAbun_(Comm\\d+)_Sp(\\d+)",
values_to = "RelativeAbundance"
)
long_data_clean <- long_data %>%
select(-Seed, -starts_with("Community.CUE"))
# survival
long_data_d <- long_data_clean %>%
mutate(Status = ifelse(RelativeAbundance < 1e-5, "Extinction", "Survival"))
# calculate the species richness
survival_summary <- long_data_d %>%
group_by(Community) %>%
summarise(
SurvivingSpecies = sum(Status == "Survival"),
TotalSpecies = n(),
SurvivalRate = SurvivingSpecies / TotalSpecies
)
survival_summary
View(long_data_d)
setwd("/home/jiayi-chen/Documents/MiCRM/code")
library(ggplot2)
library(readr)
library(tidyr)
library(dplyr)
df_abundance <- read.csv("../data/df_results.csv")
long_data <- pivot_longer(
df_abundance,
cols = starts_with("RelAbun_Comm"),
names_to = c("Community", "Species"),
names_pattern = "RelAbun_(Comm\\d+)_Sp(\\d+)",
values_to = "RelativeAbundance"
)
long_data_clean <- long_data %>%
select(-starts_with("Community.CUE"))
################### calculate the species richness ###################
long_data_d <- long_data_clean %>%
mutate(Status = ifelse(RelativeAbundance < 1e-5, "Extinction", "Survival"))
View(long_data_d)
survival_summary <- long_data_d %>%
group_by(Community) %>%
summarise(
SurvivingSpecies = sum(Status == "Survival"),
TotalSpecies = n(),
SurvivalRate = SurvivingSpecies / TotalSpecies
)
survival_summary
################### calculate the species richness ###################
long_data_d <- long_data_clean %>%
mutate(Status = ifelse(RelativeAbundance < 1e-5, "Extinction", "Survival"))
survival_summary <- long_data_d %>%
group_by(Seed, Community) %>%
summarise(
SurvivingSpecies = sum(Status == "Survival"),
TotalSpecies = n(),
SurvivalRate = SurvivingSpecies / TotalSpecies,
.groups = "drop"
)
survival_summary
survival_summary <- long_data_d %>%
group_by(Seed, Community) %>%
summarise(
richness = sum(Status == "Survival"),
TotalSpecies = n(),
SurvivalRate =richness / TotalSpecies,
.groups = "drop"
)
survival_summary
long_data_scaled <- long_data_clean %>%
left_join(species_counts, by = "Community") %>%
mutate(ScaledAbundance = RelativeAbundance * SpeciesCount)
# standrdise species number
species_counts <- long_data_clean %>%
group_by(Community) %>%
summarise(SpeciesCount = n_distinct(Species))
long_data_scaled <- long_data_clean %>%
left_join(species_counts, by = "Community") %>%
mutate(ScaledAbundance = RelativeAbundance * SpeciesCount)
View(long_data_scaled)
ggplot(long_data_clean, aes(x = ScaledAbundance, fill = Community, color = Community)) +
geom_density(alpha = 0.3) +
theme_minimal() +
labs(title = "Density of Scaled Abundance by Community",
x = "Scaled Abundance", y = "Density") +
scale_fill_manual(values = c("red", "green", "blue")) +
scale_color_manual(values = c("red", "green", "blue"))
ggplot(long_data_clean, aes(x = ScaledAbundance, fill = Community, color = Community)) +
geom_density(alpha = 0.3) +
theme_minimal() +
labs(title = "Density of Scaled Abundance by Community",
x = "RelativeAbundance", y = "Density") +
scale_fill_manual(values = c("red", "green", "blue")) +
scale_color_manual(values = c("red", "green", "blue"))
ggplot(long_data_clean, aes(x = RelativeAbundance, fill = Community, color = Community)) +
geom_density(alpha = 0.3) +
theme_minimal() +
labs(title = "Density of Scaled Abundance by Community",
x = "Relative Abundance", y = "Density") +
scale_fill_manual(values = c("red", "green", "blue")) +
scale_color_manual(values = c("red", "green", "blue"))
shannin_evenness <- long_data_d %>%
group_by(Seed, Community) %>%
summarize(
Shannon = -sum(RelativeAbundance[RelativeAbundance >0 ] * log(RelativeAbundance[RelativeAbundance >0 ])),
Evenness = Shannon/log(richness),
.group = "drop"
)
richness <- long_data_d %>%
group_by(Seed, Community) %>%
summarise(
richness = sum(Status == "Survival"),
TotalSpecies = n(),
SurvivalRate =richness / TotalSpecies,
.groups = "drop"
)
shannin_evenness <- long_data_d %>%
group_by(Seed, Community) %>%
summarize(
Shannon = -sum(RelativeAbundance[RelativeAbundance >0 ] * log(RelativeAbundance[RelativeAbundance >0 ])),
Evenness = Shannon/log(richness),
.group = "drop"
)
shannin_evenness <- long_data_d %>%
group_by(Seed, Community) %>%
summarize(
Shannon = -sum(RelativeAbundance[RelativeAbundance >0 ] * log(RelativeAbundance[RelativeAbundance >0 ])),
Evenness = Shannon/log( sum(Status == "Survival")),
.group = "drop"
)
shannon_evenness
setwd("/home/jiayi-chen/Documents/MiCRM/code")
library(ggplot2)
library(readr)
library(tidyr)
library(dplyr)
df <- read.csv("../data/df_results.csv")
long_data <- pivot_longer(
df,
cols = starts_with("RelAbun_Comm"),
names_to = c("Community", "Species"),
names_pattern = "RelAbun_(Comm\\d+)_Sp(\\d+)",
values_to = "RelativeAbundance"
)
long_data_clean <- long_data %>%
select(-starts_with("Community.CUE"))
# standrdise species number
species_counts <- long_data_clean %>%
group_by(Community) %>%
summarise(SpeciesCount = n_distinct(Species))
ggplot(long_data_clean, aes(x = RelativeAbundance, fill = Community, color = Community)) +
geom_density(alpha = 0.3) +
theme_minimal() +
labs(title = "Density of Scaled Abundance by Community",
x = "Relative Abundance", y = "Density") +
scale_fill_manual(values = c("red", "green", "blue")) +
scale_color_manual(values = c("red", "green", "blue"))
################### calculate the species richness ###################
long_data_d <- long_data_clean %>%
mutate(Status = ifelse(RelativeAbundance < 1e-5, "Extinction", "Survival"))
richness <- long_data_d %>%
group_by(Seed, Community) %>%
summarise(
richness = sum(Status == "Survival"),
TotalSpecies = n(),
SurvivalRate =richness / TotalSpecies,
.groups = "drop"
)
shannon_evenness <- long_data_d %>%
group_by(Seed, Community) %>%
summarize(
Shannon = -sum(RelativeAbundance[RelativeAbundance >0 ] * log(RelativeAbundance[RelativeAbundance >0 ])),
Evenness = Shannon/log( sum(Status == "Survival")),
.group = "drop"
)
shannon_evenness
View(shannon_evenness)
shannon_evenness <- long_data_d %>%
group_by(Seed, Community) %>%
summarize(
Shannon = -sum(RelativeAbundance[RelativeAbundance >0 ] * log(RelativeAbundance[RelativeAbundance >0 ])),
Evenness = Shannon/log( sum(Status == "Survival")),
)
View(shannon_evenness)
ggplot(long_data_clean, aes(x = RelativeAbundance, fill = Community, color = Community)) +
geom_density(alpha = 0.3) +
theme_minimal() +
labs(title = "Density of Scaled Abundance by Community",
x = "Relative Abundance", y = "Density") +
scale_fill_manual(values = c("red", "green", "blue")) +
scale_color_manual(values = c("red", "green", "blue"))
ggplot(shannon_evenness, aes(x = Community, y = Shannon, color = Community)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.7, size = 2) +
theme_minimal() +
labs(title = "Shannon Index per Community",
x = "Community", y = "Shannon Index")
l
ggplot(shannon_evenness, aes(x = Community, y = Evenness, color = Community)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.7, size = 2) +
theme_minimal() +
labs(title = "Evenness per Community",
x = "Community", y = "Evenness")
shannon_stats <- shannon_evenness%>%
summarise(
Q1 = quantile(Shannon, 0.25),
Q2 = quantile(Shannon, 0.5),
Q3 = quantile(Shannon, 0.75),
mean_val = mean(Shannon)
)
ggplot(summary_all, aes(x = Community, y = Shannon, color = Shannon)) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.8) +
scale_color_gradientn(
colours = c("lightblue", "skyblue", "deepskyblue", "blue", "darkblue"),
values = rescale(c(
shannon_stats$Q1,
shannon_stats$Q2,
shannon_stats$mean_val,
shannon_stats$Q3,
max(summary_all$Shannon)
)),
name = "Shannon"
) +
theme_minimal() +
labs(title = "Shannon Index per Community (Color by Quartiles)",
x = "Community", y = "Shannon Index")
ggplot(shannon_evenness, aes(x = Community, y = Shannon, color = Shannon)) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.8) +
scale_color_gradientn(
colours = c("lightblue", "skyblue", "deepskyblue", "blue", "darkblue"),
values = rescale(c(
shannon_stats$Q1,
shannon_stats$Q2,
shannon_stats$mean_val,
shannon_stats$Q3,
max(summary_all$Shannon)
)),
name = "Shannon"
) +
theme_minimal() +
labs(title = "Shannon Index per Community (Color by Quartiles)",
x = "Community", y = "Shannon Index")
library(scales)
ggplot(shannon_evenness, aes(x = Community, y = Shannon, color = Shannon)) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.8) +
scale_color_gradientn(
colours = c("lightblue", "skyblue", "deepskyblue", "blue", "darkblue"),
values = rescale(c(
shannon_stats$Q1,
shannon_stats$Q2,
shannon_stats$mean_val,
shannon_stats$Q3,
max(summary_all$Shannon)
)),
name = "Shannon"
) +
theme_minimal() +
labs(title = "Shannon Index per Community (Color by Quartiles)",
x = "Community", y = "Shannon Index")
ggplot(shannon_evenness, aes(x = Community, y = Shannon, color = Shannon)) +
geom_jitter(width = 0.2, height = 0, size = 2, alpha = 0.8) +
scale_color_gradientn(
colours = c("lightblue", "skyblue", "deepskyblue", "blue", "darkblue"),
values = rescale(c(
shannon_stats$Q1,
shannon_stats$Q2,
shannon_stats$mean_val,
shannon_stats$Q3,
max(shannon_evenness$Shannon)
)),
name = "Shannon"
) +
theme_minimal() +
labs(title = "Shannon Index per Community (Color by Quartiles)",
x = "Community", y = "Shannon Index")
# Calculate quartiles and scaled values for each community
shannon_by_group <- shannon_evenness %>%
mutate(
Q1 = quantile(Shannon, 0.25),
Q2 = quantile(Shannon, 0.5),
Q3 = quantile(Shannon, 0.75),
max_shannon = max(Shannon),
min_shannon = min(Shannon),
scaled_value = (Shannon - min_shannon) / (max_shannon - min_shannon)
)
# Plot with community-specific scaling and color gradient
ggplot(shannon_by_group, aes(x = Seed, y = Shannon, color = scaled_value)) +
geom_point(size = 2) +
scale_color_gradientn(
colours = c("lightblue", "skyblue", "deepskyblue", "blue", "darkblue"),
name = "Within-community scale"
) +
facet_wrap(~ Community) +
theme_minimal() +
labs(title = "Shannon index colored by community-specific gradient",
x = "Seed", y = "Shannon Index")
# Plot with community-specific scaling and color gradient
ggplot(shannon_by_group, aes(x = Community, y = Shannon, color = scaled_value)) +
geom_point(size = 2) +
scale_color_gradientn(
colours = c("lightblue", "skyblue", "deepskyblue", "blue", "darkblue"),
name = "Within-community scale"
) +
facet_wrap(~ Community) +
theme_minimal() +
labs(title = "Shannon index colored by community-specific gradient",
x = "Seed", y = "Shannon Index")
shannon_by_group <- summary_all %>%
group_by(Community) %>%
mutate(
Q1 = quantile(Shannon, 0.25),
Q2 = quantile(Shannon, 0.5),
Q3 = quantile(Shannon, 0.75),
max_shannon = max(Shannon),
min_shannon = min(Shannon),
# 在本社区内的标准化 (0-1)
scaled_value = (Shannon - min_shannon) / (max_shannon - min_shannon)
)
# Create a plot for each community with its own color scale
# Split the data by community
communities <- unique(shannon_evenness$Community)
plot_list <- lapply(communities, function(comm) {
df_comm <- shannon_evenness %>%
filter(Community == comm)
# Calculate quartiles for this community
q1 <- quantile(df_comm$Shannon, 0.25)
q2 <- quantile(df_comm$Shannon, 0.5)
q3 <- quantile(df_comm$Shannon, 0.75)
max_val <- max(df_comm$Shannon)
min_val <- min(df_comm$Shannon)
ggplot(df_comm, aes(x = Community, y = Shannon, color = Shannon)) +
geom_jitter(width = 0.2, size = 2) +
scale_color_gradientn(
colours = c("lightblue", "skyblue", "deepskyblue", "blue", "darkblue"),
values = scales::rescale(c(min_val, q1, q2, q3, max_val)),
name = paste0("Shannon\n", comm)
) +
theme_minimal() +
labs(title = paste("Community:", comm), x = NULL, y = "Shannon") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
})
# Combine all plots
combined_plot <- wrap_plots(plotlist = plot_list, ncol = length(plot_list))
library(patchwork)
install.packages("pathwork")
library(patchwork)
install.packages("patchwork")
library(patchwork)
# Create a plot for each community with its own color scale
# Split the data by community
communities <- unique(shannon_evenness$Community)
plot_list <- lapply(communities, function(comm) {
df_comm <- shannon_evenness %>%
filter(Community == comm)
# Calculate quartiles for this community
q1 <- quantile(df_comm$Shannon, 0.25)
q2 <- quantile(df_comm$Shannon, 0.5)
q3 <- quantile(df_comm$Shannon, 0.75)
max_val <- max(df_comm$Shannon)
min_val <- min(df_comm$Shannon)
ggplot(df_comm, aes(x = Community, y = Shannon, color = Shannon)) +
geom_jitter(width = 0.2, size = 2) +
scale_color_gradientn(
colours = c("lightblue", "skyblue", "deepskyblue", "blue", "darkblue"),
values = scales::rescale(c(min_val, q1, q2, q3, max_val)),
name = paste0("Shannon\n", comm)
) +
theme_minimal() +
labs(title = paste("Community:", comm), x = NULL, y = "Shannon") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
})
# Combine all plots
combined_plot <- wrap_plots(plotlist = plot_list, ncol = length(plot_list))
combined_plot
# plot shannon and evenness
ggplot(summary_all, aes(x = Community, y = Shannon, color = Community)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.7, size = 2) +
theme_minimal() +
labs(title = "Shannon Index per Community",
x = "Community", y = "Shannon Index")
# plot shannon and evenness
ggplot(shannon_evenness, aes(x = Community, y = Shannon, color = Community)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.7, size = 2) +
theme_minimal() +
labs(title = "Shannon Index per Community",
x = "Community", y = "Shannon Index")
ggplot(shannon_evenness, aes(x = Community, y = Evenness, color = Community)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.7, size = 2) +
theme_minimal() +
labs(title = "Evenness per Community",
x = "Community", y = "Evenness")
ggplot(richness, aes(x = Community, y = richness, color = Community)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.7) +
theme_minimal() +
labs(title = "Species Richness per Community",
x = "Community", y = "Species Richness")
ggplot(richness, aes(x = Community, y = SurvivalRate, color = Community)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.7) +
theme_minimal() +
labs(title = "Relative Species Richness (Survival Rate) per Community",
x = "Community", y = "Relative Richness (Survival Rate)")
ggplot(richness, aes(x = Community, y = SurvivalRate, fill = Community)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(width = 0.2, size = 1, alpha = 0.5) +
theme_minimal() +
labs(title = "Distribution of Relative Species Richness per Community",
x = "Community", y = "Relative Richness (Survival Rate)")
# plot shannon and evenness
ggplot(shannon_evenness, aes(x = Community, y = Shannon, color = Community)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.7, size = 2) +
theme_minimal() +
labs(title = "Shannon Index per Community",
x = "Community", y = "Shannon Index")
ggplot(shannon_evenness, aes(x = Community, y = Evenness, color = Community)) +
geom_jitter(width = 0.2, height = 0, alpha = 0.7, size = 2) +
theme_minimal() +
labs(title = "Evenness per Community",
x = "Community", y = "Evenness")
View(df)
setwd("/home/jiayi-chen/Documents/MiCRM/code")
library(ggplot2)
# Read the CSV file into R
df_combined <- read.csv("../data/CUE_distribution.csv")
# Create a boxplot of CUE by Status
boxplot(CUE ~ Status,
data = df_combined ,
main = "Boxplot of CUE by Status",
xlab = "Status (Survival vs. Extinction)",
ylab = "CUE",
col = c("gray", "green"))
# Create a boxplot of CUE by Community and Status using ggplot2
ggplot(df_combined, aes(x = factor(Community), y = CUE, fill = Status)) +
geom_jitter(aes(color = Status), width = 0.2, alpha = 0.6, size = 2) +
geom_boxplot() +
labs(title = "CUE Across Communities by Status",
x = "Community",
y = "CUE") +
theme_minimal()
setwd("/home/jiayi-chen/Documents/MiCRM/code")
library(ggplot2)
# Read the CSV file into R
df_combined <- read.csv("../data/CUE_distribution.csv")
# Create a boxplot of CUE by Status
boxplot(CUE ~ Status,
data = df_combined ,
main = "Boxplot of CUE by Status",
xlab = "Status (Survival vs. Extinction)",
ylab = "CUE",
col = c("gray", "green"))
View(df_combined)
